package com.blogspot.rolandopalermo.sockets;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author Rolando
 */
public class Server extends javax.swing.JFrame {

    private boolean mostrar;
    private boolean activo;

    public void setMostrar(boolean mostrar) {
        this.mostrar = mostrar;
    }

    public void setActivo(boolean activo) {
        this.activo = activo;
    }

    public Server() {
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
        mostrar = true;
        activo = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lienzo1 = new com.blogspot.rolandopalermo.sockets.Lienzo();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servidor - Receptor de video");

        lienzo1.setForeground(new java.awt.Color(255, 255, 51));
        lienzo1.setImage(null);
        lienzo1.setLayout(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lienzo1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lienzo1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cerrarServer() {
        try {
            servidor.close();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void ejecutarServidor() {
        activo = true;
        try {
            // InetAddress IPlocal = InetAddress.getLocalHost();
            //JOptionPane.showMessageDialog(this, IPlocal.getHostAddress());
            servidor = new ServerSocket(5000, 100);
            while (activo) {
                try {

                    esperarConexion();
                    entrada = new ObjectInputStream(conexion.getInputStream());
                    mostrar = true;
                    System.out.println("\nSe recibieron los flujos de entrada\n");
                    procesarConexion();

                } catch (Exception excepcionEOF) {
                    System.err.println("El servidor terminó la conexión");
                    excepcionEOF.printStackTrace();
//                    JOptionPane.showMessageDialog(this, "error en ejecutar servidor while \n\n"
//                            + excepcionEOF.getMessage() + "\n\n" + excepcionEOF.getCause());
                    new pantalla5().setVisible(true);
                    dispose();
                    cerrarServer();

                } finally {
                    System.out.println("crrando");
                    cerrarConexion();   // Paso 5: cerrar la conexión.
                }
            } // fin de instrucción while
        } // fin del bloque try
        catch (Exception excepcionES) {
            excepcionES.printStackTrace();
//            JOptionPane.showMessageDialog(this, "error en ejecutar servidor en try \n\n"
//                    + excepcionES.getMessage() + "\n\n" + excepcionES.getCause());
            new pantalla5().setVisible(true);
            dispose();
            cerrarServer();
        }
        //JOptionPane.showMessageDialog(this, "cerrando");
//        new pantalla4().setVisible(true);
//        dispose();
    } // fin del método ejecutarServidor
    // esperar que la conexión llegue, después mostrar información de la conexión

    public void esperarConexion() throws IOException {
        System.out.println("Esperando una conexión\n");
        conexion = servidor.accept(); // permitir al servidor aceptar la conexión
        conexion.setSoTimeout(2000);

        //JOptionPane.showMessageDialog(this, conexion.getInetAddress().getHostAddress());
        System.out.println("Conexión recibida de: " + conexion.getInetAddress().getHostName());
    }
    // procesar la conexión con el cliente

    public void procesarConexion() throws IOException {
        do { // procesar los mensajes enviados por el cliente
            // leer el mensaje y mostrarlo en pantalla
            try {
                //System.out.println("procesando");
                byte[] bytesImagen = null;

                if (servidor == null || conexion == null
                        || entrada == null || (bytesImagen = (byte[]) entrada.readObject()) == null) {
                    mostrar = false;
                    activo = false;
                    new pantalla5().setVisible(true);
                    dispose();
                    cerrarServer();
                    break;
                }

                //preguntar si hay ping con el ip de la conexion.
//                if(!conexion.getInetAddress().isReachable(10)){
//                    new pantalla4().setVisible(true);
//                    dispose();
//                    break;
//                }
                //System.out.println("\tmedio");
                if (!conexion.isConnected()
                        || conexion.isClosed()
                        || conexion.isInputShutdown()
                        || conexion.isOutputShutdown()
                        || !conexion.isBound()) {
                    mostrar = false;
                    new pantalla5().setVisible(true);
                    dispose();
                    cerrarServer();
                    break;
                }

                /*bytesImagen = (byte[]) entrada.readObject();
                 if (bytesImagen == null) {
                 new pantalla4().setVisible(true);
                 }*/
                // System.out.println("\t\tpreimagen");
                //preguntar si la imagen es igual a la anterior
                ByteArrayInputStream entradaImagen = new ByteArrayInputStream(bytesImagen);
                BufferedImage bufferedImage = ImageIO.read(entradaImagen);
                lienzo1.setImage(bufferedImage);
                //      System.out.println("\t\t\tlienzo");
            } // atrapar problemas que pueden ocurrir al tratar de leer del cliente
            catch (Exception excepcionClaseNoEncontrada) {
                System.out.println("\nSe recibió un tipo de objeto desconocido");
//                JOptionPane.showMessageDialog(this, "error en procesar conexion \n\n"
//                        + excepcionClaseNoEncontrada.getMessage() + "\n\n" + excepcionClaseNoEncontrada.getCause());
                mostrar = false;
                activo = false;
                new pantalla5().setVisible(true);
                dispose();
                cerrarServer();
            }

        } while (mostrar);
        int aa;
        aa = 2;
    } // fin del método procesarConexion
    // cerrar flujos y socket

    public void cerrarConexion() {
        System.out.println("\nFinalizando la conexión\n");
        try {
            if (entrada != null) {
                entrada.close();
            }
            if (conexion != null) {
                conexion.close();
            }
            //    if (servidor != null) {
            //      servidor.close();
            // }
        } catch (Exception excepcionES) {
            excepcionES.printStackTrace();
//            JOptionPane.showMessageDialog(this, "error en cerrar conexion \n\n"
//                    + excepcionES.getMessage() + "\n\n" + excepcionES.getCause());
            new pantalla5().setVisible(true);
            dispose();
            cerrarServer();
        }
    }

    public static void main(String args[]) throws IOException {
        setDefaultLookAndFeelDecorated(true);
        Server s = new Server();
        s.ejecutarServidor();
    }
    private ObjectInputStream entrada;
    private ServerSocket servidor;
    private String servidorChat;
    private Socket conexion;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.blogspot.rolandopalermo.sockets.Lienzo lienzo1;
    // End of variables declaration//GEN-END:variables
//    @Override
//    public void run() {
//        ejecutarServidor();
//    }
}
